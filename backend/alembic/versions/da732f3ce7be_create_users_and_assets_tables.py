"""create users and assets tables

Revision ID: da732f3ce7be
Revises: 20251015_assets_uuid
Create Date: 2025-10-20 23:40:49.780269
"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'da732f3ce7be'
down_revision = '20251015_assets_uuid'
branch_labels = None
depends_on = None


def upgrade():
    # Create users table if it doesn't exist
    op.create_table(
        'users',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('full_name', sa.String(length=100), nullable=False),
        sa.Column('email', sa.String(length=100), nullable=False, unique=True),
        sa.Column('hashed_password', sa.String(length=255), nullable=False),
    )

    # Create assets table if it doesn't exist
    op.create_table(
        'assets',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('email_id', sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(['email_id'], ['users.email'], ondelete='CASCADE'),
        # Add other columns as needed
    )

    # Example: create tickets table safely
    op.create_table(
        'tickets',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('user_id', sa.Integer, sa.ForeignKey('users.id', ondelete='CASCADE')),
        sa.Column('title', sa.String(length=200), nullable=False),
        sa.Column('description', sa.Text, nullable=True),
        sa.Column('status', sa.String(length=50), server_default='Open'),
        sa.Column('priority', sa.String(length=50), server_default='Medium'),
        sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP')),
        sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP')),
    )
def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('assets', sa.Column('email_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('assets', sa.Column('return_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('assets', sa.Column('asset_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('assets', sa.Column('assigned_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('fk_email'), 'assets', 'users', ['email_id'], ['email'], ondelete='CASCADE')
    op.drop_index(op.f('ix_assets_id'), table_name='assets')
    op.alter_column('assets', 'status',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False,
               existing_server_default=sa.text("'Active'::character varying"))
    op.alter_column('assets', 'location',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_column('assets', 'close_date')
    op.drop_column('assets', 'open_date')
    op.drop_column('assets', 'type')
    op.drop_column('assets', 'email')
    op.drop_column('assets', 'user_id')
    op.create_table('users_management',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), server_default=sa.text("'Developer'::character varying"), autoincrement=False, nullable=False),
    sa.Column('department', sa.VARCHAR(length=100), server_default=sa.text("'Engineering'::character varying"), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('language', sa.VARCHAR(length=50), server_default=sa.text("'English'::character varying"), autoincrement=False, nullable=False),
    sa.Column('mobile_number', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('date_format', sa.VARCHAR(length=30), server_default=sa.text("'YYYY-MM-DD'::character varying"), autoincrement=False, nullable=False),
    sa.Column('password_reset_needed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('profile_file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('profile_file_size', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('users_management_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_management_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('tickets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'Open'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=50), server_default=sa.text("'Medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('tickets_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('tickets_pkey'))
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('password_reset',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('otp_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('password_reset_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('password_reset_pkey'))
    )
    # ### end Alembic commands ###
