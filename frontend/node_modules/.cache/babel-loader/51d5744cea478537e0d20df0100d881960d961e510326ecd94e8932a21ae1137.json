{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hussa\\\\Desktop\\\\ticketing\\\\flowtrack\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// for UI/UX\n\nimport React, { createContext, useContext, useState, useEffect } from \"react\"; // <-- CORRECTED LINE\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const loadUser = () => {\n      console.log(\"AuthContext: Starting initial user load from localStorage...\");\n      try {\n        const storedUser = localStorage.getItem(\"user\");\n        if (storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n          if (parsedUser && parsedUser.email && parsedUser.id) {\n            setUser(parsedUser);\n            // FIX: Changed 'parsed.email' to 'parsedUser.email' as 'parsed' was undefined\n            console.log(\"AuthContext: User found in localStorage:\", parsedUser.email);\n          } else {\n            console.warn(\"AuthContext: Malformed user data in localStorage, clearing it.\");\n            localStorage.removeItem(\"user\");\n          }\n        } else {\n          console.log(\"AuthContext: No user found in localStorage.\");\n        }\n      } catch (error) {\n        console.error(\"AuthContext: Error parsing user from localStorage:\", error);\n        localStorage.removeItem(\"user\");\n      } finally {\n        setLoading(false);\n        console.log(\"AuthContext: Initial user load finished. Loading state set to false.\");\n      }\n    };\n    loadUser();\n  }, []);\n\n  // --- REAL LOGIN FUNCTION ---\n  const login = async (email, password) => {\n    setLoading(true);\n    console.log(`AuthContext: Login attempt for email: ${email}`);\n    try {\n      const response = await fetch(\"http://localhost:8000/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || \"Login failed\");\n      }\n      const userData = await response.json();\n\n      // Transform backend response to frontend format\n      const frontendUserData = {\n        id: userData.id,\n        name: userData.full_name || email.split(\"@\")[0] || \"User\",\n        email: userData.email,\n        token: \"real-jwt-token\" // In a real app, this would come from the backend\n      };\n      setUser(frontendUserData);\n      localStorage.setItem(\"user\", JSON.stringify(frontendUserData));\n      console.log(\"AuthContext: Login successful! User set and stored.\", frontendUserData);\n      return frontendUserData;\n    } catch (error) {\n      console.error(\"AuthContext: Login failed:\", error.message);\n      setUser(null);\n      localStorage.removeItem(\"user\");\n      throw error;\n    } finally {\n      setLoading(false);\n      console.log(\"AuthContext: Login process finished. Loading state set to false.\");\n    }\n  };\n  // --- END OF REAL LOGIN FUNCTION ---\n\n  // --- REAL REGISTRATION FUNCTION ---\n  const register = async (email, password, fullName) => {\n    setLoading(true);\n    console.log(`AuthContext: Registration attempt for email: ${email}`);\n    try {\n      const response = await fetch(\"http://localhost:8000/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password,\n          full_name: fullName\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || \"Registration failed\");\n      }\n      const userData = await response.json();\n\n      // Transform backend response to frontend format\n      const frontendUserData = {\n        id: userData.id,\n        name: userData.full_name || email.split(\"@\")[0] || \"User\",\n        email: userData.email,\n        token: \"real-jwt-token\" // In a real app, this would come from the backend\n      };\n      setUser(frontendUserData);\n      localStorage.setItem(\"user\", JSON.stringify(frontendUserData));\n      console.log(\"AuthContext: Registration successful! User set and stored.\", frontendUserData);\n      return frontendUserData;\n    } catch (error) {\n      console.error(\"AuthContext: Registration failed:\", error.message);\n      setUser(null);\n      localStorage.removeItem(\"user\");\n      throw error;\n    } finally {\n      setLoading(false);\n      console.log(\"AuthContext: Registration process finished. Loading state set to false.\");\n    }\n  };\n  // --- END OF REAL REGISTRATION FUNCTION ---\n\n  const logout = () => {\n    console.log(\"AuthContext: User logging out.\");\n    setLoading(true);\n    setUser(null);\n    localStorage.removeItem(\"user\");\n    setLoading(false);\n    console.log(\"AuthContext: Logout complete.\");\n  };\n  const authContextValue = {\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === null) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","loadUser","console","log","storedUser","localStorage","getItem","parsedUser","JSON","parse","email","id","warn","removeItem","error","login","password","response","fetch","method","headers","body","stringify","ok","errorData","json","Error","detail","userData","frontendUserData","name","full_name","split","token","setItem","message","register","fullName","logout","authContextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/hussa/Desktop/ticketing/flowtrack/frontend/src/context/AuthContext.js"],"sourcesContent":["// for UI/UX\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from \"react\"; // <-- CORRECTED LINE\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const loadUser = () => {\r\n      console.log(\r\n        \"AuthContext: Starting initial user load from localStorage...\",\r\n      );\r\n      try {\r\n        const storedUser = localStorage.getItem(\"user\");\r\n        if (storedUser) {\r\n          const parsedUser = JSON.parse(storedUser);\r\n          if (parsedUser && parsedUser.email && parsedUser.id) {\r\n            setUser(parsedUser);\r\n            // FIX: Changed 'parsed.email' to 'parsedUser.email' as 'parsed' was undefined\r\n            console.log(\r\n              \"AuthContext: User found in localStorage:\",\r\n              parsedUser.email,\r\n            );\r\n          } else {\r\n            console.warn(\r\n              \"AuthContext: Malformed user data in localStorage, clearing it.\",\r\n            );\r\n            localStorage.removeItem(\"user\");\r\n          }\r\n        } else {\r\n          console.log(\"AuthContext: No user found in localStorage.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\r\n          \"AuthContext: Error parsing user from localStorage:\",\r\n          error,\r\n        );\r\n        localStorage.removeItem(\"user\");\r\n      } finally {\r\n        setLoading(false);\r\n        console.log(\r\n          \"AuthContext: Initial user load finished. Loading state set to false.\",\r\n        );\r\n      }\r\n    };\r\n\r\n    loadUser();\r\n  }, []);\r\n\r\n  // --- REAL LOGIN FUNCTION ---\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    console.log(`AuthContext: Login attempt for email: ${email}`);\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/auth/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n          password: password,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || \"Login failed\");\r\n      }\r\n\r\n      const userData = await response.json();\r\n      \r\n      // Transform backend response to frontend format\r\n      const frontendUserData = {\r\n        id: userData.id,\r\n        name: userData.full_name || email.split(\"@\")[0] || \"User\",\r\n        email: userData.email,\r\n        token: \"real-jwt-token\", // In a real app, this would come from the backend\r\n      };\r\n\r\n      setUser(frontendUserData);\r\n      localStorage.setItem(\"user\", JSON.stringify(frontendUserData));\r\n      console.log(\"AuthContext: Login successful! User set and stored.\", frontendUserData);\r\n      return frontendUserData;\r\n    } catch (error) {\r\n      console.error(\"AuthContext: Login failed:\", error.message);\r\n      setUser(null);\r\n      localStorage.removeItem(\"user\");\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n      console.log(\"AuthContext: Login process finished. Loading state set to false.\");\r\n    }\r\n  };\r\n  // --- END OF REAL LOGIN FUNCTION ---\r\n\r\n  // --- REAL REGISTRATION FUNCTION ---\r\n  const register = async (email, password, fullName) => {\r\n    setLoading(true);\r\n    console.log(`AuthContext: Registration attempt for email: ${email}`);\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/auth/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n          password: password,\r\n          full_name: fullName,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || \"Registration failed\");\r\n      }\r\n\r\n      const userData = await response.json();\r\n      \r\n      // Transform backend response to frontend format\r\n      const frontendUserData = {\r\n        id: userData.id,\r\n        name: userData.full_name || email.split(\"@\")[0] || \"User\",\r\n        email: userData.email,\r\n        token: \"real-jwt-token\", // In a real app, this would come from the backend\r\n      };\r\n\r\n      setUser(frontendUserData);\r\n      localStorage.setItem(\"user\", JSON.stringify(frontendUserData));\r\n      console.log(\"AuthContext: Registration successful! User set and stored.\", frontendUserData);\r\n      return frontendUserData;\r\n    } catch (error) {\r\n      console.error(\"AuthContext: Registration failed:\", error.message);\r\n      setUser(null);\r\n      localStorage.removeItem(\"user\");\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n      console.log(\"AuthContext: Registration process finished. Loading state set to false.\");\r\n    }\r\n  };\r\n  // --- END OF REAL REGISTRATION FUNCTION ---\r\n\r\n  const logout = () => {\r\n    console.log(\"AuthContext: User logging out.\");\r\n    setLoading(true);\r\n    setUser(null);\r\n    localStorage.removeItem(\"user\");\r\n    setLoading(false);\r\n    console.log(\"AuthContext: Logout complete.\");\r\n  };\r\n\r\n  const authContextValue = {\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === null) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}