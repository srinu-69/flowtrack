{"ast":null,"code":"// User API service for backend integration\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({\n      detail: 'Network error'\n    }));\n    throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// User Profile API functions\nexport const userApi = {\n  // Get all users\n  async getUsers() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/`);\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n  },\n  // Get user by ID\n  async getUser(userId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/${userId}`);\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  },\n  // Create new user profile\n  async createUser(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  },\n  // Update user profile\n  async updateUser(userId, userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  },\n  // Delete user\n  async deleteUser(userId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          detail: 'Network error'\n        }));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      throw error;\n    }\n  },\n  // User authentication functions\n  async registerUser(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error registering user:', error);\n      throw error;\n    }\n  },\n  async loginUser(credentials) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error logging in user:', error);\n      throw error;\n    }\n  }\n};\n\n// Transform backend user data to frontend format\nexport const transformUserData = backendUser => {\n  return {\n    id: backendUser.user_id,\n    full_name: backendUser.full_name,\n    email: backendUser.email,\n    mobile_number: backendUser.mobile_number,\n    role: backendUser.role,\n    department: backendUser.department,\n    date_of_birth: backendUser.date_of_birth,\n    user_status: backendUser.user_status,\n    created_at: backendUser.created_at,\n    updated_at: backendUser.updated_at\n  };\n};\n\n// Transform frontend user data to backend format\nexport const transformToBackendFormat = frontendUser => {\n  return {\n    full_name: frontendUser.full_name,\n    email: frontendUser.email,\n    mobile_number: frontendUser.mobile_number,\n    role: frontendUser.role,\n    department: frontendUser.department,\n    date_of_birth: frontendUser.date_of_birth,\n    user_status: frontendUser.user_status || 'Active'\n  };\n};","map":{"version":3,"names":["API_BASE_URL","handleResponse","response","ok","errorData","json","catch","detail","Error","status","userApi","getUsers","fetch","error","console","getUser","userId","createUser","userData","method","headers","body","JSON","stringify","updateUser","deleteUser","success","registerUser","loginUser","credentials","transformUserData","backendUser","id","user_id","full_name","email","mobile_number","role","department","date_of_birth","user_status","created_at","updated_at","transformToBackendFormat","frontendUser"],"sources":["C:/Users/hussa/Desktop/ticketing/flowtrack/frontend/src/services/userApi.js"],"sourcesContent":["// User API service for backend integration\r\nconst API_BASE_URL = 'http://localhost:8000';\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({ detail: 'Network error' }));\r\n    throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// User Profile API functions\r\nexport const userApi = {\r\n  // Get all users\r\n  async getUsers() {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/users/`);\r\n      return await handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user by ID\r\n  async getUser(userId) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/users/${userId}`);\r\n      return await handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create new user profile\r\n  async createUser(userData) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/users/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n      return await handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error creating user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update user profile\r\n  async updateUser(userId, userData) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n      return await handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error updating user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete user\r\n  async deleteUser(userId) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\r\n        method: 'DELETE',\r\n      });\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ detail: 'Network error' }));\r\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\r\n      }\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // User authentication functions\r\n  async registerUser(userData) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n      return await handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error registering user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async loginUser(credentials) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n      return await handleResponse(response);\r\n    } catch (error) {\r\n      console.error('Error logging in user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Transform backend user data to frontend format\r\nexport const transformUserData = (backendUser) => {\r\n  return {\r\n    id: backendUser.user_id,\r\n    full_name: backendUser.full_name,\r\n    email: backendUser.email,\r\n    mobile_number: backendUser.mobile_number,\r\n    role: backendUser.role,\r\n    department: backendUser.department,\r\n    date_of_birth: backendUser.date_of_birth,\r\n    user_status: backendUser.user_status,\r\n    created_at: backendUser.created_at,\r\n    updated_at: backendUser.updated_at\r\n  };\r\n};\r\n\r\n// Transform frontend user data to backend format\r\nexport const transformToBackendFormat = (frontendUser) => {\r\n  return {\r\n    full_name: frontendUser.full_name,\r\n    email: frontendUser.email,\r\n    mobile_number: frontendUser.mobile_number,\r\n    role: frontendUser.role,\r\n    department: frontendUser.department,\r\n    date_of_birth: frontendUser.date_of_birth,\r\n    user_status: frontendUser.user_status || 'Active'\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}